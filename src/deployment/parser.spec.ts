import exp from "constants";
import { parseXMLLikeTags } from "./parser";
import { it, test, expect, describe } from "vitest";

describe("parseXMLLikeTags", () => {
  it("should parse simple tags without metadata", () => {
    const input = "<action>some content</action>";
    const expected = [
      {
        tag: "action",
        content: "some content",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("should parse tags with metadata", () => {
    const input = '<file name="src/index.ts">file content</file>';
    const expected = [
      {
        tag: "file",
        meta: {
          name: "src/index.ts",
        },
        content: "file content",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("should parse multiple tags", () => {
    const input = `
      <file name="src/index.ts">content1</file>
      <file name="src/container.tsx">content2</file>
      <action>content3</action>
    `;

    const expected = [
      {
        tag: "file",
        meta: {
          name: "src/index.ts",
        },
        content: "content1",
      },
      {
        tag: "file",
        meta: {
          name: "src/container.tsx",
        },
        content: "content2",
      },
      {
        tag: "action",
        content: "content3",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("should handle multiline content", () => {
    const input = `
      <file name="test.ts">
        line1
        line2
        line3
      </file>
    `;

    const expected = [
      {
        tag: "file",
        meta: {
          name: "test.ts",
        },
        content: "line1\n        line2\n        line3",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("should handle empty content", () => {
    const input = '<file name="empty.ts"></file>';
    const expected = [
      {
        tag: "file",
        meta: {
          name: "empty.ts",
        },
        content: "",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("should handle tag called content", () => {
    const input =
      '<mytag content="fake-content">real-content</mytag><mysecondtag></mysecondtag>';
    const expected = [
      {
        tag: "mytag",
        meta: {
          content: "fake-content",
        },
        content: "real-content",
      },
      {
        tag: "mysecondtag",
        content: "",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("should error on tags with invalid closure", () => {
    const input = "<invalid-tag>content</invalid-tag-closure>";

    expect(() => parseXMLLikeTags(input)).toThrowError();
  });
  
  it("parses tags in the middle of output that should be ignored", () => {
    const input = "Hello world <a b=\"parse\">c</a> random";
    const expected = [
      {
        tag: "a",
        meta: {
          b: "parse",
        },
        content: "c",
      },
    ]

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("should error on tags with no closure", () => {
    const input = "<a>";

    expect(() => parseXMLLikeTags(input)).toThrowError();
  });

  it("should parse files with tags inside their content", () => {
    const input = `
      <file name="src/index.ts">
        <action>some content</action>
      </file>
    `;

    const expected = [
      {
        tag: "file",
        meta: {
          name: "src/index.ts",
        },
        content: "<action>some content</action>",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });

  it("handles more realistic complex example", () => {
    const input = `
    <file name="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file name="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}
</file>
<file name="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={\`$\{geistSans.variable\} $\{geistMono.variable\} antialiased\`\}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<action></action>
`;

    const expected = [
      {
        tag: "file",
        meta: {
          name: "public/file.svg",
        },
        content:
          '<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>',
      },
      {
        tag: "file",
        meta: {
          name: "src/app/globals.css",
        },
        content:
          "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}",
      },
      {
        tag: "file",
        meta: {
          name: "src/app/layout.tsx",
        },
        content:
          'import type { Metadata } from "next";\nimport { Geist, Geist_Mono } from "next/font/google";\nimport "./globals.css";\n\nconst geistSans = Geist({\n  variable: "--font-geist-sans",\n  subsets: ["latin"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: "--font-geist-mono",\n  subsets: ["latin"],\n});\n\nexport const metadata: Metadata = {\n  title: "Create Next App",\n  description: "Generated by create next app",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang="en">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}',
      },
      {
        tag: "action",
        content: "",
      },
    ];

    expect(parseXMLLikeTags(input)).toEqual(expected);
  });
});
